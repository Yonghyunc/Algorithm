# 1288. 새로운 불면증 치료법

'''

민석이는 불면증에 걸렸다. 그래서 잠이 안 올 때의 민간요법 중 하나인 양 세기를 하려고 한다.

민석이는 1번 양부터 순서대로 세는 것이 재미없을 것 같아서 N의 배수 번호인 양을 세기로 하였다.

즉, 첫 번째에는 N번 양을 세고, 두 번째에는 2N번 양, … , k번째에는 kN번 양을 센다.

이렇게 숫자를 세던 민석이에게 잠은 더 오지 않고 다음과 같은 궁금증이 생겼다.

이전에 셌던 번호들의 각 자리수에서 0에서 9까지의 모든 숫자를 보는 것은 최소 몇 번 양을 센 시점일까?

예를 들어 N = 1295이라고 하자.

첫 번째로 N = 1295번 양을 센다. 현재 본 숫자는 1, 2, 5, 9이다.

두 번째로 2N = 2590번 양을 센다. 현재 본 숫자는 0, 2, 5, 9이다.

현재까지 본 숫자는 0, 1, 2, 5, 9이다.

세 번째로 3N = 3885번 양을 센다. 현재 본 숫자는 3, 5, 8이다.

현재까지 본 숫자는 0, 1, 2, 3, 5, 8, 9이다.

네 번째로 4N = 5180번 양을 센다. 현재 본 숫자는 0, 1, 5, 8이다.

현재까지 본 숫자는 0, 1, 2, 3, 5, 8, 9이다.

다섯 번째로 5N = 6475번 양을 센다. 현재 본 숫자는 4, 5, 6, 7이다.

현재까지 본 숫자는 0, 1, 2, 3, 4, 5, 6, 7, 8, 9이다.

5N번 양을 세면 0에서 9까지 모든 숫자를 보게 되므로 민석이는 양 세기를 멈춘다.

[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 N (1 ≤ N ≤ 106)이 주어진다.

[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,

최소 몇 번 양을 세었을 때 이전에 봤던 숫자들의 자릿수에서 0에서 9까지의 모든 숫자를 보게 되는지 출력한다.

( 민석이는 xN번 양을 세고 있다. )


'''


T = int(input())

for test_case in range(1, T + 1):

    # 0부터 9까지 담은 리스트 생성
    zero_to_nine = list(range(0, 10))

    N = int(input())
    k = 0

    # zero_to_nine 리스트가 빌 때까지 시행 (== 0부터 9까지 숫자가 다 나올 때까지)
    while len(zero_to_nine)!=0:
        k += 1
        num_each = []

        # kN번 양에 들어있는 숫자들을 num_each 리스트에 담음
        for i in str(k * N):
            num_each.append(i)
        
        # num_list에 들어있는 숫자가 zero_to_nine에 있으면 그 값을 제거
        for n in num_each:
            if int(n) in zero_to_nine:
                zero_to_nine.remove(int(n))
        

    print(f'#{test_case} {k * N}')



# 1. 숫자(xN) 각 자리를 리스트로 => How> => for문
# 2. 숫자는 len 함수 적용 불가 / 인덱스 X
# 3. list.remove(x) => x값 없을 시 valueerror....
# 4. 숫자 각 자리를 넣은 리스트를 만들어주려고 문자로 변환했었는데, 다시 숫자로 변환하지 않고 zero_to_nine과 비교를 해서 결과가 나오지 않았음


#-----------------------------------------------------------

# Set을 사용한 교수님 코드
for t in range(1, int(input()) + 1):
    n = int(input())
    seen = set(str(n))
    number = 1

    while len(seen) < 10:
        number += 1
        seen.update(str(n * number))

    print(f'#{t} {number * n}')

